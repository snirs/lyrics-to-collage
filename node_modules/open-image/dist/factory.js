"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = factory;

var _path = _interopRequireDefault(require("path"));

var _execa = _interopRequireDefault(require("execa"));

var _isUrl = _interopRequireDefault(require("is-url"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function factory(commands) {
  function getCommand() {
    return _getCommand.apply(this, arguments);
  }

  function _getCommand() {
    _getCommand = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee3() {
      var availableCommands;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return Promise.all(commands.map(
              /*#__PURE__*/
              function () {
                var _ref = _asyncToGenerator(
                /*#__PURE__*/
                regeneratorRuntime.mark(function _callee2(command) {
                  return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          _context2.prev = 0;
                          _context2.next = 3;
                          return _execa.default.stdout('which', [command.command]);

                        case 3:
                          return _context2.abrupt("return", command);

                        case 6:
                          _context2.prev = 6;
                          _context2.t0 = _context2["catch"](0);
                          return _context2.abrupt("return", false);

                        case 9:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2, this, [[0, 6]]);
                }));

                return function (_x2) {
                  return _ref.apply(this, arguments);
                };
              }()));

            case 2:
              availableCommands = _context3.sent;
              return _context3.abrupt("return", availableCommands.filter(Boolean)[0] || null);

            case 4:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));
    return _getCommand.apply(this, arguments);
  }

  return (
    /*#__PURE__*/
    function () {
      var _openImage = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee(imagePath) {
        var command, parameters;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return getCommand();

              case 2:
                command = _context.sent;

                if (command) {
                  _context.next = 5;
                  break;
                }

                return _context.abrupt("return", Promise.reject(new Error('No command to open the image is available in your platform.')));

              case 5:
                if (imagePath) {
                  _context.next = 9;
                  break;
                }

                return _context.abrupt("return", Promise.reject(new Error('The imagePath argument is required.')));

              case 9:
                if (!(0, _isUrl.default)(imagePath)) {
                  imagePath = _path.default.resolve(imagePath);
                }

              case 10:
                parameters = _toConsumableArray(command.parameters).map(function (parameter) {
                  return parameter.replace('%s', imagePath);
                });
                return _context.abrupt("return", (0, _execa.default)(command.command, parameters));

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function openImage(_x) {
        return _openImage.apply(this, arguments);
      }

      return openImage;
    }()
  );
}